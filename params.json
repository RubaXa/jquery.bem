{"name":"jQuery BEM","body":"# jQuery BEM\r\n\r\nЭто инструмент, предназначенный для описания поведения DOM элемента в BEM терминологии.\r\n\r\n\r\n## Пример 1\r\nРассмотрим простой пример, вам нужно, чтобы при наведении на элемент, к нему добавлялся\r\nмодификатор `_hover`, а при фокусе (например при помощи tab) `_focus`:\r\n```html\r\n<a href=\"#\" class=\"my-elem\" tabindex=\"1\">link</a>\r\nили\r\n<span class=\"my-elem\" tabindex=\"2\">...</span>\r\n```\r\n```js\r\n$.bem('my-elem', null, {\r\n\t// static methods and properties\r\n\tmods: 'focus hover'\r\n});\r\n```\r\n\r\n\r\nИ все, больше никаких телодвижений, теперь если вы наведетись на элемент с классом \"my-elem\",\r\nто получите:\r\n```html\r\n<a href=\"#\" class=\"my-elem my-elem_hover\" tabindex=\"1\">link</a>\r\n```\r\n\r\n\r\n## Пример 2\r\nПример посложней, нам нужно сделать счетчик подсчета введенных символов:\r\n```html\r\n<div class=\"b-input\">\r\n\t<input value=\"\" type=\"text\" class=\"b-input__input\" />\r\n\t<span class=\"b-input__length\"></span>\r\n</div>\r\n```\r\n```js\r\n$.bem('b-input', {\r\n\t_onKeyUpCalc: function (){\r\n\t\tthis.$('__length').text( this.$('__input').val().length );\r\n\t}\r\n}, {\r\n\tcache: true, // кешировать все выборки\r\n\tlive: {\r\n\t\t'focusin focusout': function (evt){\r\n\t\t\tthis[evt.type == 'focusin' ? 'on' : 'off']('keyup.calc', '_onKeyUpCalc');\r\n\t\t}\r\n\t}\r\n});\r\n```\r\n\r\n\r\n## b-button\r\nВот и настало время написать полноценный элемент-контрол-кнопка\r\n```html\r\n<a href=\"...\" class=\"b-button\" tabindex=\"1\">\r\n\t<span class=\"b-button__label\">button</span>\r\n\t<input type=\"submit\" class=\"b-button__input\" />\r\n</a>\r\n```\r\n```js\r\n$.bem('b-button', {\r\n\trole: 'button',\r\n\r\n\tonMod: {\r\n\t\tdisabled: function (state){\r\n\t\t\tvar attrs = { disabled: state };\r\n\r\n\t\t\t// Сохраним url ссылки\r\n\t\t\tthis._href = state || !this._href ? this.$attr('href') : this._href;\r\n\r\n\t\t\tthis\r\n\t\t\t\t.$aria(attrs)\r\n\t\t\t\t.$attr(attrs)\r\n\t\t\t\t.$attr('href', state ? null : this._href) // установить или удалить href, в зависимости от состояния\r\n\t\t\t;\r\n\r\n\t\t\tif( state ){\r\n\t\t\t\t// кнопка disabled, так что удалим все модификаторы\r\n\t\t\t\tthis.delMod('hover focus press');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tpress: function (state){\r\n\t\t\tthis.trigger(state ? 'press' : 'release');\r\n\t\t},\r\n\r\n\t\thover_no: function (){\r\n\t\t\tthis.delMod('press');\r\n\t\t},\r\n\r\n\t\tfocus: function (state){\r\n\t\t\tif( state ){\r\n\t\t\t\t// вешаем событие за пределами элемента\r\n\t\t\t\tthis.onOutside('keydown.focus', 'onFocusKeyDown');\r\n\t\t\t} else {\r\n\t\t\t\tthis.offOutside('keyup.focus keydown.focus');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t'*': function (mod, state){\r\n\t\t\tif( state && this.isDisabled() ){\r\n\t\t\t\treturn\t!~'press hover focus'.indexOf(mod);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\r\n\tonClick: function (evt){\r\n\t\tif( !this.isDisabled ){\r\n\t\t\tthis.$('__input').click();\r\n\t\t}\r\n\t},\r\n\r\n\r\n\tonFocusKeyDown: function (evt){\r\n\t\tif( !this.hasOn('keyup.focus') ){\r\n\t\t\tthis.on('keyup.focus', function (evt){\r\n\t\t\t\tif( this.hasMod('press') ){\r\n\t\t\t\t\tthis.onClick(evt);\r\n\t\t\t\t}\r\n\t\t\t\tthis.delMod('press').off('keyup.focus');\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar key = evt.keyCode;\r\n\t\tif( key == 13 || key == 32 ){\r\n\t\t\tthis.addMod('press');\r\n\t\t\tevt.preventDefault();\r\n\t\t}\r\n\t}\r\n}, {\r\n\tmods: 'hover press focus',\r\n\tlive: {\r\n\t\tleftclick: 'onClick'\r\n\t}\r\n});\r\n```\r\n\r\n\r\n### Наследование:\r\n```js\r\n$.bem(['b-button', 'b-submit'], {\r\n\tonMod: {\r\n\t\t'*': function (mod, state){\r\n\t\t\tvar ret = this.parent(mod, state);\r\n\t\t\t// you logic ...\r\n\t\t}\r\n\t},\r\n\r\n\tonFocusKeyDown: function (evt){\r\n\t\t// you logic ...\r\n\t\tthis.parent(evt); // call parent method\r\n\t}\r\n});\r\n```\r\n\r\n\r\n------------------------------------------\r\n\r\n\r\n\r\n## Готовые элементы\r\n\r\n### b-control\r\n * b-control_hover\r\n * b-control_focus\r\n * b-control_press\r\n * b-control_disabled\r\n\r\n\r\n### b-button  <-  b-control\r\n```html\r\n<a href=\"#\" class=\"b-button\">Кнопка</a>\r\n```\r\n\r\n\r\n### b-checkbox  <-  b-control\r\n * Space OR Enter — for toggle \"checked\"\r\n * b-checkbox_checked\r\n * b-checkbox_checked_mixed\r\n\r\n```html\r\n<span class=\"b-checkbox\">\r\n\t<span class=\"b-checkbox__checkmark\">\r\n\t\t<input type=\"checkbox\"/>\r\n\t</span>\r\n</span>\r\n```\r\n\r\n### b-list\r\n * UP/DOWN arrows — move \"b-list\\_\\_item\\_hover\" between \"b-list\\_\\_item\"\r\n * b-list_focus\r\n * b-list_active\r\n * b-list__item_hover\r\n\r\n```html\r\n<ul class=\"b-list\">\r\n\t<li class=\"b-list__item\">item 1</li>\r\n\t<li class=\"b-list__item\">item 2</li>\r\n</ul>\r\n```\r\n\r\n\r\n### b-dropdown  <-  b-control\r\n * ESC — remove \"expanded\"\r\n * Space OR Enter — toggle \"expanded\"\r\n * UP/DOWN arrows — move \"b-dropdown\\_\\_list\\_\\_item\" between \"b-dropdown\\_\\_list\\_\\_item\\_hover\", if before include b-list\r\n * b-dropdown_expanded\r\n * b-dropdown__link_focus\r\n * b-dropdown__link_hover\r\n * b-dropdown__link_expanded\r\n * b-dropdown__list_expanded\r\n * b-dropdown\\_\\_list\\_\\_item\\_hover — if before define b-list\r\n\r\n```html\r\n<div class=\"b-dropdown\">\r\n\t<div class=\"b-dropdown__link\">text</div>\r\n\t<div class=\"b-dropdown__list\">\r\n\t\t<div class=\"b-dropdown__list__item\">item 1</div>\r\n\t\t<div class=\"b-dropdown__list__item\">item 2</div>\r\n\t</div>\r\n</div>\r\n```\r\n\r\n\r\n\r\n### b-filter\r\n * b-filter\\_\\_list\\_\\_item\\_filtered — hidden element\r\n\r\n```html\r\n<div class=\"b-filter\">\r\n\t<input type=\"text\" class=\"b-filter__input\" />\r\n\t<div class=\"js-filter-item\">item 1</div>\r\n\t<div class=\"js-filter-item\">item 2</div>\r\n</div>\r\n```\r\n\r\n\r\n\r\n------------------------------------------\r\n\r\n\r\n\r\n## API\r\n\r\n### Создание описания\r\n$.bem(className`:String`, methods`:Object`, statics`:Object`);\r\n * className — название css-класса, для которого описываем поведение\r\n * methods — методы экземпляра класса\r\n * statics — статические методы класса\r\n\r\n\r\n### Наследование\r\n$.bem(extend`:Array`, methods`:Object`, statics`:Object`);\r\n * extend — массив из двух элементов, первым идет название того, кого наследуем\r\n\r\n\r\n### Статические методы и свойства\r\n * .$win`:jQuery` — ссылка на $(window)\r\n * .$doc`:jQuery` — ссылка на $(document)\r\n * .lazy`:Boolean = false` — ленивая инициализация\r\n * .cache`:Boolean = false` — кешировать все выборки\r\n * .live`:Object` — делигируемые события\r\n * .mods`:Set(hover,focus,press)` — авто-модификаторы (перечисление через пробел)\r\n * .attrs`:Object` — аттрибуты, которые необходимо выставить DOM-элементу\r\n\r\n\r\n### Свойства класса\r\n * .__self`:BEM` — ссылка на класс, для доступа к статическим методам и свойствам\r\n * .bildAll`:String` — название методов, которые нужно выполнять в контексте экземпляра класса\r\n * .cache`:Boolean` — кешировать выборки\r\n * .uniqId`:Number` — уникальный модификатор в рамках BEM-элементов\r\n * .role`:String` — role-атрибут\r\n * .$el`:jQuery` — ссылка на jQuery-элемент\r\n * .el`:HTMLElement` — ссылка на DOM-элемент\r\n * onMod`:Object` — список слушателей, на установку того или иного модификатора\r\n\r\n\r\n### Методы класса\r\n * .init() — вызывается при инициализация объекта (@protected)\r\n * .getId()`:Number` — получить уникальный идентификатор\r\n * .proxy(fn`:Function|String`[, arg1[, argsN]])`:Function` — связать функцию с контекстом класса\r\n * .gap(fn`:Function|String`)`:Function` — аналогично .proxy(), но вызов функции будет произведен через 1ms\r\n * .hasMod(mod`:String`[, state`:Mixed`])`:Boolean` — проверить наличие модификатора\r\n * .addMod(mods`:String`[, state`:Mixed`])`:this` — добавить список модификатор, разделитель пробел\r\n * .delMod(mods`:String`[, state`:Mixed`])`:this` — убрать модификаторы\r\n * .toggleMod(mod`:String`[, state`:Mixed`]))`:this` — addMod/delMod\r\n * .$()`:this.$el` — вернет ссылку на элемент\r\n * .$(selector`:String`)`:jQuery` — найти все элементы соответствующие css-селектору в this.$el\r\n * .$(__name`:String`)`:jQuery` — найти элементы в соответствии c BEM именованием\r\n * .$attr(name`:String`)`:Mixed` — получить значение атрибута\r\n * .$attr(name`:String`, value`:Mixed`)`:this` — изменить атрибут\r\n * .$attr(attrs`:Object`)`:this` - изменить атрибуты\r\n * .$attr(name`:String`, null)`:this` — установка атрибута в null равносильно его удалению\r\n * .$attr(selector`:String`, attrs`:Object`)`:this` — изменить атрибуты для элементов, соответствующих css-селектору\r\n * .$aria() - тоже самый $attr, только ко всем атрибутам добавляем префикс \"aria-\"\r\n * .$css(), $prop() — аналогично $attr\r\n * .on(name`:String`, fn`:String|Function`)`:this` — подписаться на событие, this.$el.bind(name, fn)\r\n * .on(name`:String`, selector`:String`, fn`:String|Function`)`:this` - слушать событие с конкретных элементов, this.$el.delegate(selecotr, name, fn)\r\n * .off(name`:String`)`:this` — убрать всех слушателей, this.$el.unbind(name)\r\n * .off(name`:String`, selector`:String`)`:this` — снять слушателя, с конкретных элементов, this.$el.undelegate(selecotr, name)\r\n * .hasOn(name`:String`)`:Boolean` — проверить наличие подписки на конкретное событие\r\n * .onOutside(name`:String`, fn`:String|Function`)`:this` — подписаться на событие, за пределами элемента\r\n * .offOutside(name`:String`)`:this` — убрать слушателя\r\n * .trigger(name`:String`[, args`:Array`])`:this` — испустить событие\r\n * .isDisabled()`:Boolean` — проверить элемент на наличие модификатора disabled\r\n * .destroy() — уничтожить экземпляр класса\r\n * .destroy(true) — уничтожить + удалить связанные элемент\r\n\r\n\r\n## Пример работы с onMod\r\n```js\r\nonMod: {\r\n\tsize: {\r\n\t\tS: function (){ /* set: _size_S */ },\r\n\t\tM: function (){ /* set: _size_M */ },\r\n\t\tL: function (){ /* set: _size_S */ },\r\n\t\t'': function (){ /* remove mod */ }\r\n\t},\r\n\r\n\tsize_XL: function (){}\r\n\r\n\tfocus: function (state/**Mixed*/){\r\n\t\t// (2) after \"*\"\r\n\t},\r\n\r\n\tfocus_yes: function (){\r\n\t\t// (3) call after \"focus\"\r\n\t},\r\n\r\n\t'*': function (mod/**String*/, state/**Mixed*/){\r\n\t\t// (1) Call before set modifier\r\n\t\t// return false, to break\r\n\t}\r\n}\r\n```\r\n","tagline":"jQuery BEM","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}